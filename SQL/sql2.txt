Source of case study: https://8weeksqlchallenge.com/case-study-2/
Exercise Dibble: https://www.db-fiddle.com/f/7VcQKQwsS3CTkGRFG7vu98/65



0. CLEAN DATA


--Update customer_orders and change 'null' and '' to NULL
UPDATE customer_orders
SET exclusions = CASE 
                   WHEN exclusions IN ('', 'null') THEN NULL 
                   ELSE exclusions 
                 END,
    extras = CASE 
               WHEN extras IN ('', 'null') THEN NULL 
               ELSE extras 
             END;
             
--Update runner_orders and change normalize NULL values
UPDATE runner_orders
SET cancellation = CASE 
					WHEN cancellation IN ('', 'null') THEN NULL
                    ELSE cancellation
                   END;


How many pizzas were ordered?

SELECT COUNT(order_id) AS pizzas_ordered
FROM customer_orders;


How many unique customer orders were made?

WITH distinct_orders AS(
  	SELECT DISTINCT order_id
	FROM customer_orders
  )
SELECT COUNT(distinct_orders) AS unique_orders
FROM distinct_orders;


How many successful orders were delivered by each runner?

WITH order_list AS(
  	SELECT runner_id, cancellation
	FROM runner_orders
  	WHERE cancellation IS NULL
  )
SELECT DISTINCT runner_id, COUNT(*)
FROM order_list
GROUP BY runner_id;


How many of each type of pizza was delivered?

WITH order_list AS(
  	SELECT runner_orders.order_id, customer_orders.pizza_id, runner_orders.cancellation
	FROM runner_orders
  	JOIN customer_orders
  	ON runner_orders.order_id = customer_orders.order_id
  	WHERE cancellation IS NULL

  )
SELECT pizza_name, COUNT(pizza_name)
FROM order_list
JOIN pizza_names
ON order_list.pizza_id = pizza_names.pizza_id
GROUP BY pizza_names.pizza_name;


How many Vegetarian and Meatlovers were ordered by each customer?

SELECT customer_id, pizza_name, COUNT(pizza_name)
FROM customer_orders
JOIN pizza_names
ON customer_orders.pizza_id = pizza_names.pizza_id
GROUP BY customer_orders.customer_id, pizza_names.pizza_name
ORDER BY customer_orders.customer_id;


What was the maximum number of pizzas delivered in a single order?

WITH pizza_orders AS(
	SELECT DISTINCT order_id, COUNT(order_id) AS number_of_pizzas
	FROM customer_orders
	GROUP BY customer_orders.order_id
	ORDER BY order_id
  )
SELECT pizza_orders.order_id, number_of_pizzas
FROM pizza_orders
JOIN runner_orders
ON pizza_orders.order_id = runner_orders.order_id
WHERE runner_orders.cancellation IS NULL
ORDER BY number_of_pizzas DESC
LIMIT 1;


For each customer, how many delivered pizzas had at least 1 change and how many had no changes?

WITH delivered_orders AS(
  	SELECT *
	FROM runner_orders
	WHERE cancellation IS NULL
	),
	exclusions AS(
	SELECT 
      customer_id,
      exclusions,
      CASE WHEN exclusions IS NULL THEN 'no' ELSE 'yes' END AS changes
	FROM delivered_orders
	JOIN customer_orders
	ON customer_orders.order_id = delivered_orders.order_id
      )
SELECT DISTINCT 
	customer_id,
	COUNT(*) FILTER (WHERE changes = 'yes') AS changed_pizzas,
    COUNT(*) FILTER (WHERE changes = 'no') AS nonchanged_pizzas
FROM exclusions
GROUP BY exclusions.customer_id;


How many pizzas were delivered that had both exclusions and extras?

SELECT COUNT(*) as pizzas_delivered
FROM customer_orders
JOIN runner_orders
ON customer_orders.order_id = runner_orders.order_id
WHERE extras IS NOT NULL 
AND exclusions IS NOT NULL
AND cancellation IS NULL;


What was the total volume of pizzas ordered for each hour of the day?

SELECT 
	EXTRACT(HOUR FROM order_time) as order_hour,
    	COUNT(*) AS total_pizzas
FROM customer_orders
GROUP BY order_hour
ORDER BY order_hour;


What was the volume of orders for each day of the week?
SELECT 
	EXTRACT(DAY FROM order_time) as order_day,
    	COUNT(*) AS total_pizzas
FROM customer_orders
GROUP BY order_day
ORDER BY order_day;


B. Runner and Customer Experience

How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)

SELECT 
	DATE '2021-01-01' + ((registration_date - DATE '2021-01-01') / 7) * 7 AS week_start,
    COUNT(*) AS runners_signed_up
FROM runners
GROUP BY week_start
ORDER BY week_start;


What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?

SELECT 
	runner_id,
	AVG(EXTRACT(EPOCH FROM (CAST(pickup_time AS TIMESTAMP) - order_time)) / 60) AS arrival_time_minutes
FROM customer_orders
JOIN runner_orders
ON customer_orders.order_id = runner_orders.order_id
WHERE
	runner_orders.cancellation IS NULL
    AND pickup_time IS NOT NULL
GROUP BY runner_id
ORDER BY runner_id;


Is there any relationship between the number of pizzas and how long the order takes to prepare?

WITH pizzas_ordered AS(
SELECT
	customer_orders.order_id,
    COUNT(*) AS pizzas_ordered,
  	MIN(customer_orders.order_time) AS order_time,
    MIN(CAST(runner_orders.pickup_time AS TIMESTAMP)) as pickup_time,
    MIN(CAST(runner_orders.pickup_time AS TIMESTAMP)) - MIN(customer_orders.order_time) AS preparation_time
FROM customer_orders
JOIN runner_orders
ON customer_orders.order_id = runner_orders.order_id
WHERE runner_orders.cancellation IS NULL
GROUP BY customer_orders.order_id
  )
SELECT pizzas_ordered, preparation_time
FROM pizzas_ordered
ORDER BY pizzas_ordered DESC;


What was the average distance travelled for each customer?

SELECT 
    ROUND(AVG(CAST(REGEXP_REPLACE(distance, '[^0-9\.]', '', 'g') AS NUMERIC)), 2) AS average_distance
FROM runner_orders
WHERE cancellation IS NULL;


What was the difference between the longest and shortest delivery times for all orders?

SELECT 
	customer_id,
    ROUND(AVG(CAST(REGEXP_REPLACE(distance, '[^0-9\.]', '', 'g') AS NUMERIC)), 2) AS average_distance
FROM runner_orders
JOIN customer_orders
ON runner_orders.order_id = customer_orders.order_id
WHERE cancellation IS NULL
GROUP BY customer_orders.customer_id;


What was the average speed for each runner for each delivery and do you notice any trend for these values?

WITH distance_duration AS(
SELECT 
  	runner_orders.order_id,
	runner_id,
    CAST(REGEXP_REPLACE(distance, '[^0-9\.]', '', 'g') AS NUMERIC) AS distance_km,
    CAST(REGEXP_REPLACE(duration, '[^0-9\.]', '', 'g') AS NUMERIC) / 60 AS duration_h
FROM runner_orders
JOIN customer_orders
ON runner_orders.order_id = customer_orders.order_id
WHERE cancellation IS NULL
  )
SELECT DISTINCT
	runner_id,
	order_id,
    ROUND(distance_km / duration_h, 2) AS speed
FROM distance_duration
ORDER BY runner_id;


What is the successful delivery percentage for each runner?

WITH deliveries AS(
SELECT 
	runner_id,
    COUNT(*) AS total_deliveries,
    COUNT(*) FILTER (WHERE cancellation IS NOT NULL) AS cancelled_deliveries
FROM runner_orders
GROUP BY runner_id
ORDER BY runner_id
  )
SELECT 
	*,
	(100 - (cancelled_deliveries::FLOAT / total_deliveries::FLOAT) * 100) AS successful_delivery_percentage
FROM deliveries;


C. Ingredient Optimisation

What are the standard ingredients for each pizza?

SELECT
  pizza_recipes.pizza_id,
  pizza_toppings.topping_name
FROM pizza_recipes
JOIN LATERAL unnest(string_to_array(pizza_recipes.toppings, ', ')) AS tid(topping_id_text)
ON TRUE
JOIN pizza_toppings
ON pizza_toppings.topping_id = CAST(tid.topping_id_text AS INTEGER)
ORDER BY pizza_recipes.pizza_id, pizza_toppings.topping_id;


What was the most commonly added extra?

SELECT pizza_toppings.topping_name, 
	count(*) AS extra_count
FROM customer_orders
JOIN LATERAL unnest(string_to_array(extras, ',')) AS extra_id
ON TRUE
JOIN pizza_toppings
ON pizza_toppings.topping_id = CAST(extra_id AS INTEGER)
GROUP BY pizza_toppings.topping_name
ORDER BY extra_count DESC
LIMIT 1;


What was the most common exclusion?

SELECT pizza_toppings.topping_name, 
	count(*) AS exclusion_count
FROM customer_orders
JOIN LATERAL unnest(string_to_array(exclusions, ',')) AS exclusion_id
ON TRUE
JOIN pizza_toppings
ON pizza_toppings.topping_id = CAST(exclusion_id AS INTEGER)
GROUP BY pizza_toppings.topping_name
ORDER BY exclusion_count DESC
LIMIT 1;


Generate an order item for each record in the customers_orders table in the format of one of the following:
Meat Lovers
Meat Lovers - Exclude Beef
Meat Lovers - Extra Bacon
Meat Lovers - Exclude Cheese, Bacon - Extra Mushroom, Peppers

SELECT 
	co.order_id,
    pn.pizza_name ||
    COALESCE(
      ' - Exclude ' || excluded_toppings,
      ''
    ) ||
    COALESCE(
      ' - Extra ' || extra_toppings,
      ''
    ) AS order_description
FROM customer_orders co
JOIN pizza_names pn 
ON co.pizza_id = pn.pizza_id

LEFT JOIN (
  SELECT
  	order_id,
  	STRING_AGG(pt.topping_name, ', ' ORDER BY pt.topping_name) AS excluded_toppings
  FROM customer_orders
  JOIN LATERAL unnest(string_to_array(exclusions, ', ')) AS e(tid) ON exclusions IS NOT NULL
  JOIN pizza_toppings pt ON pt.topping_id = e.tid::int
  GROUP BY order_id
  ) excluded ON co.order_id = excluded.order_id
  
 LEFT JOIN (
   SELECT
   	order_id,
   	STRING_AGG(pt.topping_name, ', ' ORDER BY pt.topping_name) AS extra_toppings
   FROM customer_orders
   JOIN LATERAL unnest(string_to_array(extras, ', ')) AS x(tid) ON extras IS NOT NULL
   JOIN pizza_toppings pt ON pt.topping_id = x.tid::int
   GROUP BY order_id
   ) extras ON co.order_id = extras.order_id


Generate an alphabetically ordered comma separated ingredient list for each pizza order from the customer_orders table and add a 2x in front of any relevant ingredients
For example: "Meat Lovers: 2xBacon, Beef, ... , Salami"

SELECT
  co.order_id,
  pn.pizza_name || ': ' || ingredient_list AS full_ingredient_list
FROM customer_orders co
JOIN pizza_names pn ON co.pizza_id = pn.pizza_id
JOIN pizza_recipes pr ON co.pizza_id = pr.pizza_id

-- Build the final ingredient list
LEFT JOIN LATERAL (
  SELECT STRING_AGG(
    CASE 
      WHEN base.topping_id IS NOT NULL AND extra.topping_id IS NOT NULL THEN '2x' || pt.topping_name
      ELSE pt.topping_name
    END,
    ', ' ORDER BY pt.topping_name
  ) AS ingredient_list
  FROM (
    -- All unique topping IDs: from recipe + extras
    SELECT DISTINCT UNNEST(STRING_TO_ARRAY(pr.toppings, ', '))::INT AS topping_id
    UNION
    SELECT DISTINCT UNNEST(STRING_TO_ARRAY(co.extras, ', '))::INT
    WHERE co.extras IS NOT NULL
  ) all_toppings
  LEFT JOIN (
    SELECT UNNEST(STRING_TO_ARRAY(pr.toppings, ', '))::INT AS topping_id
  ) base ON base.topping_id = all_toppings.topping_id
  LEFT JOIN (
    SELECT UNNEST(STRING_TO_ARRAY(co.extras, ', '))::INT AS topping_id
  ) extra ON extra.topping_id = all_toppings.topping_id
  JOIN pizza_toppings pt ON pt.topping_id = all_toppings.topping_id
) ingredients ON true
ORDER BY co.order_id;


What is the total quantity of each ingredient used in all delivered pizzas sorted by most frequent first?

WITH exploded_orders AS (
  SELECT
    co.order_id,
    -- Base toppings for this pizza order
    UNNEST(STRING_TO_ARRAY(pr.toppings, ', '))::INT AS base_topping_id,
    -- Extras for this order (can be NULL)
    STRING_TO_ARRAY(co.extras, ', ') AS extras_array,
    -- Exclusions for this order (can be NULL)
    STRING_TO_ARRAY(co.exclusions, ', ') AS exclusions_array
  FROM customer_orders co
  JOIN pizza_recipes pr ON co.pizza_id = pr.pizza_id
),

-- Unnest extras into rows
extras_expanded AS (
  SELECT
    order_id,
    base_topping_id,
    (extras_unnest)::INT AS extra_topping_id,
    exclusions_array
  FROM exploded_orders,
  LATERAL UNNEST(COALESCE(extras_array, ARRAY[]::TEXT[])) AS extras_unnest
),

-- Combine base toppings and extras into single list per order
all_toppings AS (
  SELECT order_id, base_topping_id AS topping_id, exclusions_array
  FROM exploded_orders

  UNION ALL

  SELECT order_id, extra_topping_id AS topping_id, exclusions_array
  FROM extras_expanded
),

-- Filter out excluded toppings per order
filtered_toppings AS (
  SELECT
    order_id,
    topping_id
  FROM all_toppings
  WHERE
    exclusions_array IS NULL OR
    NOT (topping_id::TEXT = ANY(exclusions_array))
)

SELECT
  pt.topping_name,
  COUNT(*) AS total_quantity
FROM filtered_toppings ft
JOIN pizza_toppings pt ON pt.topping_id = ft.topping_id
GROUP BY pt.topping_name
ORDER BY total_quantity DESC;


D. Pricing and Ratings

If a Meat Lovers pizza costs $12 and Vegetarian costs $10 and there were no charges for changes - how much money has Pizza Runner made so far if there are no delivery fees?

WITH pizza_prices AS(
	SELECT DISTINCT
		pizza_name,
    	COUNT(pizza_name) AS count,
    	CASE WHEN pizza_name IN ('Meatlovers') THEN 10
    	ELSE 12 END AS price
	FROM customer_orders co
	JOIN runner_orders ro
	ON co.order_id = ro.order_id
	JOIN pizza_names pn
	ON pn.pizza_id = co.pizza_id
	WHERE ro.cancellation IS NULL
	GROUP BY pn.pizza_name)
SELECT *,
	count * price AS total_price
FROM pizza_prices


What if there was an additional $1 charge for any pizza extras?
Add cheese is $1 extra

WITH topping_prices AS(
	SELECT 
		topping_id,
  		topping_name,
   	 	CASE 
  			WHEN topping_name IN ('Cheese') THEN 2
    		ELSE 1 
  		END as extra_price
	FROM pizza_toppings
	),
pizza_prices AS(
	SELECT 
		customer_orders.order_id,
		pizza_names.pizza_name,
    	CASE 
    		WHEN pizza_name IN ('Meatlovers') THEN 12
        	ELSE 10
   		END AS pizza_price,
  		topping_prices.extra_price
	FROM customer_orders
	LEFT JOIN LATERAL (
  	SELECT UNNEST(STRING_TO_ARRAY(extras, ', '))::INT AS extra_id
  	) extra_ids
	ON customer_orders.extras IS NOT NULL
 	LEFT JOIN topping_prices
 	ON extra_ids.extra_id = topping_prices.topping_id
 	JOIN pizza_names
 	ON customer_orders.pizza_id = pizza_names.pizza_id
 	ORDER BY customer_orders.order_id
 ),
 total_pizza_prices AS(
   SELECT *,
 		CASE 
    		WHEN extra_price IS NOT NULL THEN pizza_price + extra_price
        	ELSE pizza_price
    	END AS total_price
 	FROM pizza_prices
)
SELECT DISTINCT
	pizza_name,
    SUM(total_price) AS total
FROM total_pizza_prices
GROUP BY total_pizza_prices.pizza_name;


The Pizza Runner team now wants to add an additional ratings system that allows customers to rate their runner, how would you design an additional table for this new dataset - generate a schema for this new table and insert your own data for ratings for each successful customer order between 1 to 5.

CREATE TABLE runner_ratings (
  order_id INTEGER,
  runner_id INTEGER,
  runner_rating INTEGER CHECK (runner_rating BETWEEN 1 AND 5)
  );
  
INSERT INTO runner_ratings 
	(order_id, runner_id, runner_rating)
VALUES
	(1, 1, 4),
    (2, 1, 4),
    (3, 1, 3),
    (4, 2, 5),
    (5, 3, 2),
    (10, 1, 5);


Using your newly generated table - can you join all of the information together to form a table which has the following information for successful deliveries?
customer_id
order_id
runner_id
rating
order_time
pickup_time
Time between order and pickup
Delivery duration
Average speed
Total number of pizzas

SELECT
	co.customer_id,
    co.order_id,
    ro.runner_id,
    rr.runner_rating,
    co.order_time,
    ro.pickup_time,
    ro.pickup_time::TIMESTAMP - co.order_time AS time_between_order_and_pickup,
    -- extract distance
    CAST(REGEXP_REPLACE(ro.distance, '[^0-9\.]', '', 'g') AS NUMERIC) AS distance_km,
    -- extract duration
    CAST(REGEXP_REPLACE(ro.duration, '[^0-9]', '', 'g') AS NUMERIC) AS duration_min,
    -- count average speed = distance/ duration in hours
    ROUND(
      	CAST(REGEXP_REPLACE(ro.distance, '[^0-9\.]', '', 'g') AS NUMERIC) / 
    	(CAST(REGEXP_REPLACE(ro.duration, '[^0-9]', '', 'g') AS NUMERIC) / 60.0), 2
    ) AS avg_kmph,
    count(co.order_id) AS total_pizzas
FROM customer_orders co
JOIN runner_orders ro
ON co.order_id = ro.order_id
JOIN runner_ratings rr
ON rr.order_id = co.order_id
WHERE ro.cancellation IS NULL
GROUP BY 
  co.customer_id,
  co.order_id,
  ro.runner_id,
  rr.runner_rating,
  co.order_time,
  ro.pickup_time,
  ro.distance,
  ro.duration;


If a Meat Lovers pizza was $12 and Vegetarian $10 fixed prices with no cost for extras and each runner is paid $0.30 per kilometre traveled - how much money does Pizza Runner have left over after these deliveries?

WITH order_distance AS(
	SELECT DISTINCT
		co.order_id,
    	CAST(REGEXP_REPLACE(ro.distance, '[^0-9\.]', '', 'g') AS NUMERIC) AS distance_km
	FROM customer_orders co
	JOIN runner_orders ro
	ON co.order_id = ro.order_id
	WHERE ro.cancellation IS NULL
	ORDER BY order_id
),
ordered_pizzas AS(
	SELECT DISTINCT
		order_id,
		COUNT(order_id) AS number_of_pizzas,
    	pizza_id
	FROM customer_orders co
	GROUP BY co.order_id, co.pizza_id
	ORDER BY order_id
),
totalprice_deliverycost AS(
	SELECT
		SUM(CASE
    			WHEN op.pizza_id = 1 THEN op.number_of_pizzas * 12
        		ELSE op.number_of_pizzas * 10
    		END) AS total_price,
    	SUM(od.distance_km) * 0.3 AS delivery_cost
	FROM ordered_pizzas op
	JOIN order_distance od
	ON od.order_id = op.order_id
)
SELECT total_price - delivery_cost AS money_leftover
FROM totalprice_deliverycost;


E. Bonus Questions
If Danny wants to expand his range of pizzas - how would this impact the existing data design? Write an INSERT statement to demonstrate what would happen if a new Supreme pizza with all the toppings was added to the Pizza Runner menu?

INSERT INTO pizza_names (pizza_id, pizza_name)
VALUES (3, 'Supreme');

INSERT INTO pizza_recipes (pizza_id, toppings)
VALUES (3, '1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12');
